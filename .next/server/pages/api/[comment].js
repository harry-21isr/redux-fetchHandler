"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/[comment]";
exports.ids = ["pages/api/[comment]"];
exports.modules = {

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "(api)/./helpers/db-util.js":
/*!****************************!*\
  !*** ./helpers/db-util.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"connectDatabase\": () => (/* binding */ connectDatabase),\n/* harmony export */   \"insertDocument\": () => (/* binding */ insertDocument)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_0__);\n\nconst connectDatabase = async ()=>{\n    const client = await mongodb__WEBPACK_IMPORTED_MODULE_0__.MongoClient.connect(\"mongodb+srv://harry:THEWANTED-20@cluster0.piegrff.mongodb.net/newsletter?retryWrites=true&w=majority\");\n    return client;\n};\nconst insertDocument = async (client, collection, document)=>{\n    const db = client.db(collection);\n    await db.collection(\"emails\").insertOne(document);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9oZWxwZXJzL2RiLXV0aWwuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFzQztBQUUvQixNQUFNQyxlQUFlLEdBQUcsVUFBWTtJQUMxQyxNQUFNQyxNQUFNLEdBQUcsTUFBTUYsd0RBQW1CLENBQUMsc0dBQXNHLENBQUM7SUFFaEosT0FBT0UsTUFBTSxDQUFDO0NBQ2QsQ0FBQztBQUVLLE1BQU1FLGNBQWMsR0FBRyxPQUFPRixNQUFNLEVBQUVHLFVBQVUsRUFBRUMsUUFBUSxHQUFLO0lBQ3JFLE1BQU1DLEVBQUUsR0FBR0wsTUFBTSxDQUFDSyxFQUFFLENBQUNGLFVBQVUsQ0FBQztJQUVoQyxNQUFNRSxFQUFFLENBQUNGLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQ0csU0FBUyxDQUFDRixRQUFRLENBQUMsQ0FBQztDQUNsRCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWNvdXJzZS8uL2hlbHBlcnMvZGItdXRpbC5qcz9mNTc3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vbmdvQ2xpZW50IH0gZnJvbSBcIm1vbmdvZGJcIjtcblxuZXhwb3J0IGNvbnN0IGNvbm5lY3REYXRhYmFzZSA9IGFzeW5jICgpID0+IHsgLy93ZSBzZXBhcmF0ZSB0aGUgZGIgY29uZWN0aW9uIGludG8gaXRzIG93biBmblxuXHRjb25zdCBjbGllbnQgPSBhd2FpdCBNb25nb0NsaWVudC5jb25uZWN0KFwibW9uZ29kYitzcnY6Ly9oYXJyeTpUSEVXQU5URUQtMjBAY2x1c3RlcjAucGllZ3JmZi5tb25nb2RiLm5ldC9uZXdzbGV0dGVyP3JldHJ5V3JpdGVzPXRydWUmdz1tYWpvcml0eVwiKTtcblxuXHRyZXR1cm4gY2xpZW50O1xufTtcblxuZXhwb3J0IGNvbnN0IGluc2VydERvY3VtZW50ID0gYXN5bmMgKGNsaWVudCwgY29sbGVjdGlvbiwgZG9jdW1lbnQpID0+IHsgLy8gd2Ugc2VwYXJhdGUgdGhlIGluc2VydERhdGEgaW50byBpdHMgb3duIGZuLlxuXHRjb25zdCBkYiA9IGNsaWVudC5kYihjb2xsZWN0aW9uKTtcblxuXHRhd2FpdCBkYi5jb2xsZWN0aW9uKFwiZW1haWxzXCIpLmluc2VydE9uZShkb2N1bWVudCk7XG59OyJdLCJuYW1lcyI6WyJNb25nb0NsaWVudCIsImNvbm5lY3REYXRhYmFzZSIsImNsaWVudCIsImNvbm5lY3QiLCJpbnNlcnREb2N1bWVudCIsImNvbGxlY3Rpb24iLCJkb2N1bWVudCIsImRiIiwiaW5zZXJ0T25lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./helpers/db-util.js\n");

/***/ }),

/***/ "(api)/./pages/api/[comment].js":
/*!********************************!*\
  !*** ./pages/api/[comment].js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _helpers_db_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../helpers/db-util */ \"(api)/./helpers/db-util.js\");\n\n\nconst Handler = async (req, res)=>{\n    /* const commentId = req.query.commentId;\n\t\n  const dummyList = [{ email: \"harry@test.com\",\n  name: \"harrytest\",\n  text: \"somer amdom text\"},\n  { email: \"harry@test2.com\",\n  name: \"harrytest2\",\n  text: \"somer amdom text2\"}] */ let response;\n    try {\n        response = await (0,_helpers_db_util__WEBPACK_IMPORTED_MODULE_1__.connectDatabase)(); //lacking await\n    } catch (error) {\n        res.status().json({\n            mesage: \"connecting the database failed\"\n        });\n        return;\n    }\n    if (req.method == \"GET\") {\n        const db = response.db(\"form\");\n        const allComments = await db.collection(\"comment\") //could be added in db_utils like getAllComments fn.\n        .find() //get all data from comment collection db\n        .sort({\n            _id: -1\n        }) //sort data in descendant way (fron newest to older.)\n        .toArray(); //convert it to array to manage arrays in front end\n        res.status(200).json({\n            response: allComments\n        });\n    }\n    if (req.method == \"POST\") {\n        const { name , email , text  } = req.body;\n        try {\n            await (0,_helpers_db_util__WEBPACK_IMPORTED_MODULE_1__.insertDocument)(response, \"comment\", {\n                name,\n                email,\n                text\n            });\n        } catch (error1) {\n            res.status(500).json({\n                message: \"inserting data failed.\"\n            });\n        }\n        res.status(201).json({\n            response: `'added comment for id ${name} ${email} ${text} `\n        });\n    }\n    response.close();\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Handler); /*  //normal way of make a fetch to a database (no using helpers/db-util.js fn)\n\n\nimport { MongoClient } from \"mongodb\";\nimport React from \"react\";\n\nconst Handler = async (req, res) => {\n\n\n\tconst response = await MongoClient.connect(\"mongodb+srv://harry:THEWANTED-20@cluster0.piegrff.mongodb.net/form?retryWrites=true&w=majority\");\n\n\tif (req.method == \"GET\") {\n\t\tconst db = response.db(\"form\");\n\n\t\tconst allComments = await db.collection(\"comment\")\n    .find() //get all data from comment collection db\n    .sort({ _id: -1 }) //sort data in descendant way (fron newest to older.)\n    .toArray(); //convert it to array to manage arrays in\n\n\t\tres.status(200).json({ response: allComments });\n\t}\n\n\tif (req.method == \"POST\") {\n\t\tconst { name, email, text } = req.body;\n\n\t\tconst db = response.db(\"form\");\n\n\t\tawait db.collection(\"comment\").insertOne({ name, email, text });\n\n\t\tres.status(201).json({ response: `'added comment for id ${name} ${email} ${text} ` });\n\t}\n\n\tresponse.close();\n};\n\nexport default Handler;\n\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvW2NvbW1lbnRdLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0M7QUFDa0M7QUFFeEUsTUFBTUcsT0FBTyxHQUFHLE9BQU9DLEdBQUcsRUFBRUMsR0FBRyxHQUFLO0lBQ25DOzs7Ozs7OzhCQU82QixHQUU3QixJQUFJQyxRQUFRO0lBRVosSUFBSTtRQUNIQSxRQUFRLEdBQUcsTUFBTUwsaUVBQWUsRUFBRSxDQUFDLENBQUMsZUFBZTtLQUNuRCxDQUFDLE9BQU9NLEtBQUssRUFBRTtRQUNmRixHQUFHLENBQUNHLE1BQU0sRUFBRSxDQUFDQyxJQUFJLENBQUM7WUFBRUMsTUFBTSxFQUFFLGdDQUFnQztTQUFFLENBQUMsQ0FBQztRQUNoRSxPQUFPO0tBQ1A7SUFFRCxJQUFJTixHQUFHLENBQUNPLE1BQU0sSUFBSSxLQUFLLEVBQUU7UUFDeEIsTUFBTUMsRUFBRSxHQUFHTixRQUFRLENBQUNNLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFFOUIsTUFBTUMsV0FBVyxHQUFHLE1BQU1ELEVBQUUsQ0FDMUJFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxvREFBb0Q7U0FDMUVDLElBQUksRUFBRSxDQUFDLHlDQUF5QztTQUNoREMsSUFBSSxDQUFDO1lBQUVDLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FBRSxDQUFDLENBQUMscURBQXFEO1NBQ3ZFQyxPQUFPLEVBQUUsRUFBRSxtREFBbUQ7UUFFaEViLEdBQUcsQ0FBQ0csTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7WUFBRUgsUUFBUSxFQUFFTyxXQUFXO1NBQUUsQ0FBQyxDQUFDO0tBQ2hEO0lBRUQsSUFBSVQsR0FBRyxDQUFDTyxNQUFNLElBQUksTUFBTSxFQUFFO1FBQ3pCLE1BQU0sRUFBRVEsSUFBSSxHQUFFQyxLQUFLLEdBQUVDLElBQUksR0FBRSxHQUFHakIsR0FBRyxDQUFDa0IsSUFBSTtRQUN0QyxJQUFJO1lBQ0gsTUFBTXBCLGdFQUFjLENBQUNJLFFBQVEsRUFBRSxTQUFTLEVBQUU7Z0JBQUVhLElBQUk7Z0JBQUVDLEtBQUs7Z0JBQUVDLElBQUk7YUFBRSxDQUFDLENBQUM7U0FDakUsQ0FBQyxPQUFPZCxNQUFLLEVBQUU7WUFDZkYsR0FBRyxDQUFDRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztnQkFBRWMsT0FBTyxFQUFFLHdCQUF3QjthQUFFLENBQUMsQ0FBQztTQUM1RDtRQUNEbEIsR0FBRyxDQUFDRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztZQUFFSCxRQUFRLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRWEsSUFBSSxDQUFDLENBQUMsRUFBRUMsS0FBSyxDQUFDLENBQUMsRUFBRUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUFFLENBQUMsQ0FBQztLQUN0RjtJQUNEZixRQUFRLENBQUNrQixLQUFLLEVBQUUsQ0FBQztDQUNqQjtBQUVELGlFQUFlckIsT0FBTyxFQUFDLENBRXZCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWNvdXJzZS8uL3BhZ2VzL2FwaS9bY29tbWVudF0uanM/OTJlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb25nb0NsaWVudCB9IGZyb20gXCJtb25nb2RiXCI7XG5pbXBvcnQgeyBjb25uZWN0RGF0YWJhc2UsIGluc2VydERvY3VtZW50IH0gZnJvbSBcIi4uLy4uL2hlbHBlcnMvZGItdXRpbFwiO1xuXG5jb25zdCBIYW5kbGVyID0gYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG5cdC8qIGNvbnN0IGNvbW1lbnRJZCA9IHJlcS5xdWVyeS5jb21tZW50SWQ7XG5cdFxuICBjb25zdCBkdW1teUxpc3QgPSBbeyBlbWFpbDogXCJoYXJyeUB0ZXN0LmNvbVwiLFxuICBuYW1lOiBcImhhcnJ5dGVzdFwiLFxuICB0ZXh0OiBcInNvbWVyIGFtZG9tIHRleHRcIn0sXG4gIHsgZW1haWw6IFwiaGFycnlAdGVzdDIuY29tXCIsXG4gIG5hbWU6IFwiaGFycnl0ZXN0MlwiLFxuICB0ZXh0OiBcInNvbWVyIGFtZG9tIHRleHQyXCJ9XSAqL1xuXG5cdGxldCByZXNwb25zZTtcblxuXHR0cnkge1xuXHRcdHJlc3BvbnNlID0gYXdhaXQgY29ubmVjdERhdGFiYXNlKCk7IC8vbGFja2luZyBhd2FpdFxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdHJlcy5zdGF0dXMoKS5qc29uKHsgbWVzYWdlOiBcImNvbm5lY3RpbmcgdGhlIGRhdGFiYXNlIGZhaWxlZFwiIH0pO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmIChyZXEubWV0aG9kID09IFwiR0VUXCIpIHtcblx0XHRjb25zdCBkYiA9IHJlc3BvbnNlLmRiKFwiZm9ybVwiKTtcblxuXHRcdGNvbnN0IGFsbENvbW1lbnRzID0gYXdhaXQgZGJcblx0XHRcdC5jb2xsZWN0aW9uKFwiY29tbWVudFwiKSAvL2NvdWxkIGJlIGFkZGVkIGluIGRiX3V0aWxzIGxpa2UgZ2V0QWxsQ29tbWVudHMgZm4uXG5cdFx0XHQuZmluZCgpIC8vZ2V0IGFsbCBkYXRhIGZyb20gY29tbWVudCBjb2xsZWN0aW9uIGRiXG5cdFx0XHQuc29ydCh7IF9pZDogLTEgfSkgLy9zb3J0IGRhdGEgaW4gZGVzY2VuZGFudCB3YXkgKGZyb24gbmV3ZXN0IHRvIG9sZGVyLilcblx0XHRcdC50b0FycmF5KCk7IC8vY29udmVydCBpdCB0byBhcnJheSB0byBtYW5hZ2UgYXJyYXlzIGluIGZyb250IGVuZFxuXG5cdFx0cmVzLnN0YXR1cygyMDApLmpzb24oeyByZXNwb25zZTogYWxsQ29tbWVudHMgfSk7XG5cdH1cblxuXHRpZiAocmVxLm1ldGhvZCA9PSBcIlBPU1RcIikge1xuXHRcdGNvbnN0IHsgbmFtZSwgZW1haWwsIHRleHQgfSA9IHJlcS5ib2R5O1xuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCBpbnNlcnREb2N1bWVudChyZXNwb25zZSwgXCJjb21tZW50XCIsIHsgbmFtZSwgZW1haWwsIHRleHQgfSk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogXCJpbnNlcnRpbmcgZGF0YSBmYWlsZWQuXCIgfSk7XG5cdFx0fVxuXHRcdHJlcy5zdGF0dXMoMjAxKS5qc29uKHsgcmVzcG9uc2U6IGAnYWRkZWQgY29tbWVudCBmb3IgaWQgJHtuYW1lfSAke2VtYWlsfSAke3RleHR9IGAgfSk7XG5cdH1cblx0cmVzcG9uc2UuY2xvc2UoKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhhbmRsZXI7XG5cbi8qICAvL25vcm1hbCB3YXkgb2YgbWFrZSBhIGZldGNoIHRvIGEgZGF0YWJhc2UgKG5vIHVzaW5nIGhlbHBlcnMvZGItdXRpbC5qcyBmbilcblxuXG5pbXBvcnQgeyBNb25nb0NsaWVudCB9IGZyb20gXCJtb25nb2RiXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmNvbnN0IEhhbmRsZXIgPSBhc3luYyAocmVxLCByZXMpID0+IHtcblxuXG5cdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgTW9uZ29DbGllbnQuY29ubmVjdChcIm1vbmdvZGIrc3J2Oi8vaGFycnk6VEhFV0FOVEVELTIwQGNsdXN0ZXIwLnBpZWdyZmYubW9uZ29kYi5uZXQvZm9ybT9yZXRyeVdyaXRlcz10cnVlJnc9bWFqb3JpdHlcIik7XG5cblx0aWYgKHJlcS5tZXRob2QgPT0gXCJHRVRcIikge1xuXHRcdGNvbnN0IGRiID0gcmVzcG9uc2UuZGIoXCJmb3JtXCIpO1xuXG5cdFx0Y29uc3QgYWxsQ29tbWVudHMgPSBhd2FpdCBkYi5jb2xsZWN0aW9uKFwiY29tbWVudFwiKVxuICAgIC5maW5kKCkgLy9nZXQgYWxsIGRhdGEgZnJvbSBjb21tZW50IGNvbGxlY3Rpb24gZGJcbiAgICAuc29ydCh7IF9pZDogLTEgfSkgLy9zb3J0IGRhdGEgaW4gZGVzY2VuZGFudCB3YXkgKGZyb24gbmV3ZXN0IHRvIG9sZGVyLilcbiAgICAudG9BcnJheSgpOyAvL2NvbnZlcnQgaXQgdG8gYXJyYXkgdG8gbWFuYWdlIGFycmF5cyBpblxuXG5cdFx0cmVzLnN0YXR1cygyMDApLmpzb24oeyByZXNwb25zZTogYWxsQ29tbWVudHMgfSk7XG5cdH1cblxuXHRpZiAocmVxLm1ldGhvZCA9PSBcIlBPU1RcIikge1xuXHRcdGNvbnN0IHsgbmFtZSwgZW1haWwsIHRleHQgfSA9IHJlcS5ib2R5O1xuXG5cdFx0Y29uc3QgZGIgPSByZXNwb25zZS5kYihcImZvcm1cIik7XG5cblx0XHRhd2FpdCBkYi5jb2xsZWN0aW9uKFwiY29tbWVudFwiKS5pbnNlcnRPbmUoeyBuYW1lLCBlbWFpbCwgdGV4dCB9KTtcblxuXHRcdHJlcy5zdGF0dXMoMjAxKS5qc29uKHsgcmVzcG9uc2U6IGAnYWRkZWQgY29tbWVudCBmb3IgaWQgJHtuYW1lfSAke2VtYWlsfSAke3RleHR9IGAgfSk7XG5cdH1cblxuXHRyZXNwb25zZS5jbG9zZSgpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSGFuZGxlcjtcblxuKi9cbiJdLCJuYW1lcyI6WyJNb25nb0NsaWVudCIsImNvbm5lY3REYXRhYmFzZSIsImluc2VydERvY3VtZW50IiwiSGFuZGxlciIsInJlcSIsInJlcyIsInJlc3BvbnNlIiwiZXJyb3IiLCJzdGF0dXMiLCJqc29uIiwibWVzYWdlIiwibWV0aG9kIiwiZGIiLCJhbGxDb21tZW50cyIsImNvbGxlY3Rpb24iLCJmaW5kIiwic29ydCIsIl9pZCIsInRvQXJyYXkiLCJuYW1lIiwiZW1haWwiLCJ0ZXh0IiwiYm9keSIsIm1lc3NhZ2UiLCJjbG9zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/[comment].js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/[comment].js"));
module.exports = __webpack_exports__;

})();